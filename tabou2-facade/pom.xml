<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>tabou2</artifactId>
        <groupId>rm</groupId>
        <version>1.2.7</version>
        <relativePath>../</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>

	<artifactId>tabou2-facade</artifactId>
	<packaging>jar</packaging>

	<properties>
		<finalName>tabou2</finalName>
	</properties>

	<build>

		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<!-- <groupId>org.openapitools</groupId> <artifactId>openapi-generator-maven-plugin</artifactId> -->
				<groupId>io.swagger</groupId>
				<artifactId>swagger-codegen-maven-plugin</artifactId>
				<version>${swagger.codegen.version}</version>
				<configuration>
					<!-- Les interfaces sont généres dans la target, c'est normal -->
					<modelPackage>rm.tabou2.service.dto</modelPackage>
					<language>spring</language>
					<!-- <generatorName>spring</generatorName> -->
					<library>spring-mvc</library>
					<generateModelTests>false</generateModelTests>
					<generateModelDocumentation>false</generateModelDocumentation>
					<generateSupportingFiles>false</generateSupportingFiles>
					<generateApiDocumentation>false</generateApiDocumentation>
					<generateApis>true</generateApis>
					<generateModels>false</generateModels>
					<configOptions>
						<!-- Activier le 'interfaceOnly' à true pour la compile, sinon conflit,
							et à false pour la génération -->
						<interfaceOnly>true</interfaceOnly>
						<dateLibrary>legacy</dateLibrary>
						<!--<skipOverwrite>true</skipOverwrite> -->
					</configOptions>
				</configuration>
				<executions>
					<execution>
						<id>generate-api</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<apiPackage>rm.tabou2.facade.api</apiPackage>
							<inputSpec>./resources/openapi/tabou2-api.json</inputSpec>
							<templateDirectory>${project.basedir}/src/conf/generation/</templateDirectory>
						</configuration>
					</execution>
					<execution>
						<id>generate-api-v1</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<apiPackage>rm.tabou2.facade.api.v1</apiPackage>
							<inputSpec>./resources/openapi/tabou2-api-v1.json</inputSpec>
							<templateDirectory>${project.basedir}/src/conf/generation/version</templateDirectory>
						</configuration>
					</execution>
					<execution>
						<id>generate-api-v2</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<apiPackage>rm.tabou2.facade.api.v2</apiPackage>
							<inputSpec>./resources/openapi/tabou2-api-v2.json</inputSpec>
							<templateDirectory>${project.basedir}/src/conf/generation/version</templateDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<configuration>
					<delimiters>
						<delimiter>@</delimiter>
					</delimiters>
					<useDefaultDelimiters>false</useDefaultDelimiters>
				</configuration>
			</plugin>

			<!-- JAR executable Spring Boot -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>a-jar</id>
						<phase>package</phase>
					</execution>
				</executions>
				<configuration>
					<executable>true</executable>
					<finalName>${project.parent.artifactId}</finalName>
				</configuration>
			</plugin>

			<!-- War Spring Boot -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<executions>
					<execution>
						<id>a-war</id>
						<phase>package</phase>
						<goals>
							<goal>war</goal>
						</goals>
						<configuration>
							<failOnMissingWebXml>false</failOnMissingWebXml>
							<packagingExcludes>
								WEB-INF/lib/mapstruct-1.2.0.Final.jar,
								WEB-INF/lib/jcl-over-slf4j-1.7.29.jar,
								WEB-INF/lib/tomcat-embed-core-*.jar,
								WEB-INF/lib/tomcat-annotations-api-*.jar,
								WEB-INF/lib/spring-boot-devtools-*.jar,
								%regex[WEB-INF/lib/spring.*-test-.*\.jar]
							</packagingExcludes>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- WAR with final name -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<executions>
					<execution>
						<id>b-war</id>
						<phase>package</phase>
						<goals>
							<goal>war</goal>
						</goals>
						<configuration>
							<failOnMissingWebXml>false</failOnMissingWebXml>
							<packagingExcludes>
								WEB-INF/lib/mapstruct-1.2.0.Final.jar,
								WEB-INF/lib/jcl-over-slf4j-1.7.29.jar,
								WEB-INF/lib/tomcat-embed-core-*.jar,
								WEB-INF/lib/tomcat-annotations-api-*.jar,
								WEB-INF/lib/spring-boot-devtools-*.jar,
								%regex[WEB-INF/lib/spring.*-test-.*\.jar]
							</packagingExcludes>
							<warName>${finalName}</warName>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

	<profiles>

		<profile>
			<id>docker</id>
			<properties>
				<packageDatadirScmVersion>master</packageDatadirScmVersion>
				<dockerImageName>sigrennesmetropole/geor_tabou2_backend</dockerImageName>
				<dockerDatadirScmUrl>scm:git:https://github.com/georchestra/datadir.git</dockerDatadirScmUrl>
				<dockerDatadirScmVersion>docker-${packageDatadirScmVersion}</dockerDatadirScmVersion>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>com.spotify</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>1.2.2</version>
						<dependencies>
							<dependency>
								<groupId>com.google.guava</groupId>
								<artifactId>guava</artifactId>
								<version>28.2-jre</version>
							</dependency>
						</dependencies>
						<executions>
							<execution>
								<id>build-docker-image</id>
								<phase>package</phase>
								<goals>
									<goal>build</goal>
									<goal>push</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<imageName>${dockerImageName}</imageName>
							<imageTags>
								<imageTag>${project.version}</imageTag>
								<imageTag>latest</imageTag>
							</imageTags>
							<!-- chemin relatif depuis le target du présent projet -->
							<dockerDirectory>${project.basedir}/../docker/tabou2-backend</dockerDirectory>

							<!-- copy the service's jar file from target into the root directory 
								of the image -->
							<resources>
								<resource>
									<targetPath>/var/lib/jetty/webapps/</targetPath>
									<directory>${project.build.directory}</directory>
									<include>${finalName}.war</include>
								</resource>
								<!-- <resource> <targetPath>/etc/georchestra</targetPath> <directory>${project.build.directory}/datadir</directory> 
									<include>${project.artifactId}/**</include> </resource> -->
							</resources>
							<!-- This will require to set up the docker-hub credentials correctly 
								into your ~/.m2/settings.xml, see: https://github.com/spotify/docker-maven-plugin#authenticating-with-private-registries -->
							<serverId>docker-hub</serverId>
							<registryUrl>https://index.docker.io/v1/</registryUrl>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>
	<dependencies>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>tabou2-service</artifactId>
			<version>${project.version}</version>
			<type>jar</type>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Server Web -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-tomcat</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>

		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
		</dependency>

		<!-- Swagger UI dependency -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
		</dependency>
		<!-- Swagger 2 doc dependency -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<exclusions>
				<exclusion>
					<groupId>com.fasterxml.jackson.core</groupId>
					<artifactId>jackson-annotations</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.jasig.cas.client</groupId>
			<artifactId>cas-client-support-springboot</artifactId>
		</dependency>

		<dependency>
			<groupId>org.openapitools</groupId>
			<artifactId>jackson-databind-nullable</artifactId>
		</dependency>

		<dependency>
			<groupId>org.ocpsoft.rewrite</groupId>
			<artifactId>rewrite-servlet</artifactId>
		</dependency>

		<dependency>
			<groupId>org.ocpsoft.rewrite</groupId>
			<artifactId>rewrite-integration-spring</artifactId>
		</dependency>

	</dependencies>

</project>
